/contextualizer
    ├── pbcopy
    ├── requirements.txt
    ├── src
    │   ├── __pycache__
    │   │   ├── file_content.cpython-312.pyc
    │   │   └── file_tree.cpython-312.pyc
    │   ├── file_content.py
    │   ├── file_tree.py
    │   └── main.py
    └── tests
        └── test_cli.py

./src/main.py
```
#!/usr/bin/env python3

import os
import sys
import argparse
from file_tree import RootNode
from file_content import FileContentManager

def main():
    parser = argparse.ArgumentParser(description='Recursively print the file tree.')
    parser.add_argument('--cwd', type=str, default=os.getcwd(),
                        help='Change the current working directory.')
    parser.add_argument('-ip', '--ignore-path', action='append', default=[],
                        help='Paths to ignore in the file tree (relative to cwd or absolute).')
    parser.add_argument('-it', '--ignore-tree', action='store_true',
                        help='Ignore the entire tree and only display specified files.')
    parser.add_argument('file_paths', nargs='*',
                        help='Files to display contents of if they exist in the tree.')
    args = parser.parse_args()

    cwd = args.cwd
    validate_cwd(cwd)
    cwd_abs = os.path.abspath(cwd)

    ignore_paths_abs = get_ignore_paths_abs(args.ignore_path, cwd_abs)
    ignore_tree = args.ignore_tree
    if not ignore_tree:
        print_file_tree(cwd_abs, ignore_paths_abs)

    specified_files_abs = get_specified_files(args.file_paths, cwd_abs)
    print_files_content(specified_files_abs, cwd_abs, ignore_paths_abs)

def validate_cwd(cwd):
    if not os.path.isdir(cwd):
        print(f"Error: Directory '{cwd}' does not exist.")
        sys.exit(1)

def get_ignore_paths_abs(ignore_paths, cwd_abs):
    ignore_paths_abs = []
    for p in ignore_paths:
        if os.path.isabs(p):
            ignore_paths_abs.append(os.path.abspath(p))
        else:
            ignore_paths_abs.append(os.path.abspath(os.path.join(cwd_abs, p)))
    return ignore_paths_abs

def print_file_tree(cwd_abs, ignore_paths_abs):
    root_name = '/' + os.path.basename(cwd_abs)
    root_node = RootNode(root_name, cwd_abs)
    root_node.mount(ignore_paths=ignore_paths_abs)
    root_node.print()

def get_specified_files(file_paths, cwd_abs):
    specified_files = []
    for p in file_paths:
        # Parse line numbers if present
        path = p
        start_line = None
        end_line = None
        if ':' in p:
            parts = p.rsplit(':', 2)
            # parts can be [path], [path, start], or [path, start, end]
            if len(parts) == 2:
                path, start_line_str = parts
                end_line_str = None
            elif len(parts) == 3:
                path, start_line_str, end_line_str = parts
            else:
                print(f"Error: Invalid line number format in '{p}'.")
                sys.exit(1)
            # Convert line numbers to integers
            try:
                if start_line_str != '':
                    start_line = int(start_line_str)
                else:
                    start_line = None
                if end_line_str is not None and end_line_str != '':
                    end_line = int(end_line_str)
                else:
                    end_line = None
            except ValueError:
                print(f"Error: Invalid line number format in '{p}'. Line numbers must be integers.")
                sys.exit(1)
        else:
            path = p

        # Get absolute path
        if os.path.isabs(path):
            abs_path = os.path.abspath(path)
        else:
            abs_path = os.path.abspath(os.path.join(cwd_abs, path))

        specified_files.append({'path': abs_path, 'start_line': start_line, 'end_line': end_line})

    return specified_files

def print_files_content(specified_files_abs, cwd_abs, ignore_paths_abs):
    manager = FileContentManager(specified_files_abs, cwd_abs, ignore_paths_abs)
    manager.process_files()


if __name__ == '__main__':

```

./tests/test_cli.py
```
import os
import unittest
import subprocess
import tempfile
import shutil

class TestFileTreeCLI(unittest.TestCase):
    def setUp(self):
        self.test_dir = tempfile.mkdtemp()
        self.original_cwd = os.getcwd()
        os.chdir(self.test_dir)

        # Create the directory structure
        os.makedirs('folder1', exist_ok=True)
        os.makedirs('folder2', exist_ok=True)
        # Create files with content
        with open('folder1/file1.txt', 'w') as f:
            f.write('Content of file1.txt')
        with open('folder1/file2.txt', 'w') as f:
            f.write('Content of file2.txt')
        with open('folder2/file3.txt', 'w') as f:
            f.write('Content of file3.txt')
        with open('file4.txt', 'w') as f:
            f.write('Content of file4.txt')
        with open('README.md', 'w') as f:
            f.write('# README Content')

        # Path to the script to be tested
        self.script_path = os.path.join(self.original_cwd, '..', 'src/main.py')

    def tearDown(self):
        # Change back to the original working directory
        os.chdir(self.original_cwd)
        # Remove the temporary directory
        shutil.rmtree(self.test_dir)

    def test_basic_tree_display(self):
        # Test the basic tree display
        result = subprocess.run(['python', self.script_path, f'--cwd={self.test_dir}'],
                                stdout=subprocess.PIPE,  text=True)
        expected_output = f"""/{os.path.basename(self.test_dir)}
    ├── README.md
    ├── file4.txt
    ├── folder1
    │   ├── file1.txt
    │   └── file2.txt
    └── folder2
        └── file3.txt
"""
        self.assertEqual(result.stdout.strip(), expected_output.strip())

    def test_ignore_path(self):
        # Test ignoring a path
        result = subprocess.run(['python', self.script_path, f'--cwd={self.test_dir}',
                                 '--ignore-path=folder1'],
                                stdout=subprocess.PIPE, text=True)
        expected_output = f"""/{os.path.basename(self.test_dir)}
    ├── README.md
    ├── file4.txt
    └── folder2
        └── file3.txt
"""
        self.assertEqual(result.stdout.strip(), expected_output.strip())

    def test_display_file_contents(self):
        # Test displaying contents of specified files
        result = subprocess.run(['python', self.script_path, f'--cwd={self.test_dir}',
                                 'README.md', 'folder2/file3.txt'],
                                stdout=subprocess.PIPE, text=True)
        expected_tree = f"""/{os.path.basename(self.test_dir)}
├── folder1
│   ├── file1.txt
│   └── file2.txt
├── folder2
│   └── file3.txt
├── file4.txt
└── README.md
"""
        expected_content = """
./README.md
```
# README Content
```

./folder2/file3.txt
```
Content of file3.txt
```
"""
# Combine expected outputs
        expected_output = expected_tree.strip() + expected_content
        self.assertEqual(result.stdout.strip(), expected_output.strip())

    def test_specified_files_under_ignored_paths(self):
        # Test specifying files under ignored paths
        result = subprocess.run(['python', self.script_path, f'--cwd={self.test_dir}',
                                 '--ignore-path=folder1', 'folder1/file1.txt'],
                                stdout=subprocess.PIPE, text=True)
        expected_tree = f"""/{os.path.basename(self.test_dir)}
├── folder1
│   └── file1.txt
├── folder2
│   └── file3.txt
├── file4.txt
└── README.md
"""
        expected_content = """
./folder1/file1.txt
```
Content of file1.txt
```
"""
        expected_output = expected_tree.strip() + expected_content
        self.assertEqual(result.stdout.strip(), expected_output.strip())

    def test_nonexistent_file(self):
        # Test specifying a nonexistent file
        result = subprocess.run(['python', self.script_path, f'--cwd={self.test_dir}',
                                 'nonexistent.txt'],
                                stdout=subprocess.PIPE, text=True)
        expected_tree = f"""/{os.path.basename(self.test_dir)}
        ├── folder1
        │   ├── file1.txt
        │   └── file2.txt
        ├── folder2
        │   └── file3.txt
        ├── file4.txt
        └── README.md
        Warning: 'nonexistent.txt' does not exist or is not a file."""
        self.assertEqual(result.stdout.strip(), expected_tree.strip())

    def test_directory_as_file(self):
        # Test specifying a directory instead of a file
        result = subprocess.run(['python', self.script_path, f'--cwd={self.test_dir}',
                                 'folder1'],
                                stdout=subprocess.PIPE, text=True)
        expected_tree = f"""/{os.path.basename(self.test_dir)}
        ├── folder1
        │   ├── file1.txt
        │   └── file2.txt
        ├── folder2
        │   └── file3.txt
        ├── file4.txt
        └── README.md
        Warning: 'folder1' is a directory, not a file."""
        self.assertEqual(result.stdout.strip(), expected_tree.strip())

    def test_file_outside_cwd(self):
        # Create a file outside the test directory
        outside_file = os.path.join(self.original_cwd, 'outside.txt')
        with open(outside_file, 'w') as f:
            f.write('Content of outside.txt')
        try:
            # Test specifying a file outside the cwd
            result = subprocess.run(['python', self.script_path, f'--cwd={self.test_dir}',
                                     outside_file],
                                    stdout=subprocess.PIPE, text=True)
            expected_tree = f"""/{os.path.basename(self.test_dir)}
        ├── folder1
        │   ├── file1.txt
        │   └── file2.txt
        ├── folder2
        │   └── file3.txt
        ├── file4.txt
        └── README.md
        Warning: '{os.path.relpath(outside_file, self.test_dir)}' is not under the specified cwd."""
            self.assertEqual(result.stdout.strip(), expected_tree.strip())
        finally:
            # Clean up the outside file
            os.remove(outside_file)

if __name__ == '__main__':

```
